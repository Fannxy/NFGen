
@types.vectorize
def soft_plus(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -15.625, -11.25, -6.875, -2.5, -0.3125, 0.78125, 15.0]
    coeffA = [[15757.81593303855, 5759.72491503301, 905.55347107839, 79.3454339308, 4.18274880352, 0.13260826666, 0.00234035841, 1.773244e-05], [205168.65587131513, 96304.8772012941, 19517.20985961454, 2211.04707158271, 151.06628408949, 6.21941347035, 0.14275803778, 0.00140846453], [1467228.3516793065, 944801.7157971155, 265971.63591753587, 42266.93441288048, 4081.7704336218, 238.89791435952, 7.82913186243, 0.11062946303], [3140632.9576840466, 2594090.2017257987, 970089.0499687907, 210914.39086884193, 28523.93339798163, 2378.57646562752, 112.36011851645, 2.3036922521], [2907139.7674294, 2096049.8620280838, 520134.7185811619, -8099.99383224074, -30635.80216367526, -5253.47023968434, 24.73772258755, 58.81301421142], [2907352.281155266, 2099678.5381551534, 523209.29083968734, -19394.89645465312, 0.0, 0.0, 0.0, 0.0], [2975395.8656573934, 1880680.6863248579, 781998.1933781243, -146642.4667005737, 16307.88725306385, -1068.85633595843, 38.10393935381, -0.56920718861], [280.41531926683, 4194214.371466575, 6.24526861896, -0.32816577434, 0.01013353037, -0.00018401066, 1.82076e-06, -7.58e-09]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def tanh(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -3.125, -0.78125, 0.0, 0.1953125, 0.78125, 3.125, 12.5]
    coeffA = [[-4194173.072630944, 16.68433970131, 0.86727673568, 0.0183454618, 0.00013652433], [-3608817.0721267513, 445247.40056726034, 126867.3897902733, 16019.69475278112, 755.41149052651], [443310.5643031813, 6149706.701032153, 3217043.811996814, 775435.898513988, 71768.61553282502], [0.0, 4266818.971802611, 429613.84863511875, -693310.0664538674, 0.0], [7e-11, 4194576.231347561, -8890.0752375404, -1339358.640797975, 0.0], [570.1283871191, 4182674.8934939816, 90919.93937296577, -1745585.3274528827, 669002.271183645], [-443310.56430317473, 6149706.701032141, -3217043.81199681, 775435.8985139898, -71768.61553282566], [4045268.042423117, 76088.81124167377, -13754.89484578199, 1054.42721732424, -29.17683277022], [4194279.0022553257, 0.00015393431, -7.02959e-06, 1.3549e-07, -9.4e-10]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def sigmoid(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.625, -12.5, -9.375, -6.25, -3.125, -0.78125, 0.0, 1.5625, 12.5]
    coeffA = [[72.69609768235, 14.02871514157, 1.10119227061, 0.04502288064, 0.00101202505, 1.187192e-05, 5.686e-08], [62183.23932408683, 24162.7089936723, 3936.64766420814, 343.91636561591, 16.97966378348, 0.44890860069, 0.00496242991], [366372.52466398466, 176582.27638259606, 35861.09778386994, 3920.85427294143, 243.0449521177, 8.08850285801, 0.11278589921], [1473611.6905421386, 920133.7877163024, 245243.7997642538, 35554.62701525312, 2946.08951933399, 131.88174884064, 2.48546387762], [2649827.1136657535, 2012321.7826827748, 670939.6083058974, 124691.5200608887, 13518.50984746394, 805.06700412267, 20.45244483641], [2086685.594056033, 998760.4034867941, -97805.7302069218, -189227.7113920223, -59052.81660348854, -8162.20079125634, -439.67471176205], [2097139.5017196543, 1049670.1684311929, 8264.29721557035, -73582.34760637266, 0.0, 0.0, 0.0], [2097139.5017196543, 1066704.742950652, -53701.73107938899, -43331.87915336693, 0.0, 0.0, 0.0], [1776053.61516664, 1704501.7711873485, -508252.05893370585, 80957.08992609136, -7196.72052566599, 336.6136134217, -6.45349564281], [4193457.5972299566, 170.78125838207, -14.1698123814, 0.60276617445, -0.01392155111, 0.00016617755, -8.0382e-07]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def elu(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.0, -6.25, -4.0625, -1.875, -0.78125, 0.0006103515625]
    coeffA = [[-4194271.187065585, 0.6748873599, 0.01834870165, 0.00015955008], [-4106988.741624766, 22268.20921643523, 1849.10976216361, 50.16756652301], [-3088279.8165694713, 511031.7876112814, 80778.67337369535, 4339.18189448651], [-1259837.50422231, 1960090.7000926142, 466169.71244532976, 38674.70724333341], [-155039.09821308983, 3632318.4138106937, 1325100.361010493, 188717.18016915815], [6.24117069782, 4182831.6873808536, 2001476.0606318028, 477670.77184647287], [-1.86e-09, 4194279.0034393077, 1.7e-10, -0.0]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def selu(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.0, -6.25, -4.0625, -2.96875, -1.875, -0.78125, 0.0006103515625]
    coeffA = [[-7373945.31140335, 1.18651900634, 0.03225883984, 0.00028050488], [-7220494.103643818, 39149.72342543688, 3250.91861084873, 88.19956446491], [-5429502.637769774, 898444.6370217857, 142016.93052709778, 7628.7127272183], [-3369490.435327218, 2394409.410392051, 505669.98969854985, 37225.08214847879], [-1576803.2166885303, 4244866.525322428, 1144994.7150078525, 111133.56712792422], [-272574.1327547517, 6385976.524274871, 2329658.04031578, 331783.54565652227], [-1791.01473871581, 7339202.948399305, 3487231.8133979393, 819585.1594297808], [-3.73e-09, 4406933.143192683, 2.7e-10, -1e-11]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def gelu(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -3.75, -2.5, -1.25, 0.0, 0.3125, 1.25, 2.5, 5.0]
    coeffA = [[-2846.29456290974, -685.23146359561, -50.0054887914, -1.14298260094], [-1916307.361618036, -1581903.5338090858, -437553.98210765066, -40511.57103758872], [-1203980.5555027295, -383499.9956227352, 188181.32542370155, 63626.90145651568], [0.0, 2146329.5646905424, 1950968.8688592135, 471204.06202182453], [1e-11, 2095601.9893701745, 1704585.4234277843, -170739.15500447794], [17204.83322366532, 1960869.5620745495, 2068055.4170300204, -517951.05409748835], [-1203980.555502751, 4577778.999062077, 188181.325423685, -63626.901456513], [-1099094.957902926, 4986962.37709154, -188109.03522665496, 14707.22407252014], [-4.31966047903, 4194279.978923079, -0.06835506716, 0.00151900149]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def soft_sign(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -12.5, -3.125, -0.390625, 0.0, 0.1953125, 1.5625, 6.25, 25.0]
    coeffA = [[-3287563.138827128, 84802.80946006758, 4092.57764072737, 106.27482574972, 1.40860799004, 0.00747272143], [-1691893.7527093443, 810445.6534534493, 145865.20293252857, 14569.88331949528, 754.13051151922, 15.75207334766], [-102325.42505327293, 3480960.7912857607, 2163503.139316666, 842614.4836796755, 178117.72968890186, 15425.62205695547], [0.0, 4170528.4203215903, 3785452.299373007, 2125166.2031567893, 0.0, 0.0], [0.0, 4190202.4346107095, -4058012.896061954, 2918121.6331233378, 0.0, 0.0], [12627.96385748896, 4030846.0010750624, -3380497.073457894, 2076411.8614415901, -764324.9014783774, 121835.10260179952], [785842.7496271322, 1836708.1672255958, -601983.5215449886, 114116.1253203238, -11442.92464300276, 468.2526708134], [2607671.035230407, 282737.12108503, -26662.05894997275, 1366.80906593192, -35.94319560273, 0.37934771085], [3542618.148250116, 44380.42543593627, -1616.34658122798, 32.876715291, -0.35303750506, 0.00156211285]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def isru(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -1.5625, -0.390625, 0.0, 0.1953125, 1.5625, 6.25]
    coeffA = [[-4012542.096584223, 31770.53965584714, 2186.32787976553, 71.89993936199, 1.12818750866, 0.00678998569], [-1171935.407383768, 2808804.473016107, 1154318.3480841839, 245488.96377811505, 26292.87217053757, 1121.04398916206], [76488.4730160534, 4737819.565256781, 1354577.0889307815, -989666.1586643229, -821052.0109008108, -172350.05091483882], [0.0, 4205441.769283423, 168688.48232847924, -1525388.5901357953, 0.0, 0.0], [0.0, 4195092.280718264, -24362.30165239546, -1935570.2356769072, 0.0, 0.0], [-16759.01378700511, 4357676.067170705, -456492.01750692417, -1988432.018924645, 1348184.0994081332, -278683.6102262892], [1171935.4073837067, 2808804.4730162146, -1154318.3480842488, 245488.9637781314, -26292.87217053936, 1121.04398916213], [4012542.0965843564, 31770.53965582645, -2186.32787976567, 71.899939362, -1.12818750866, 0.00678998569]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def snormal_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-10.0, -6.25, -5.0, -3.75, -2.5, -0.625, 0.0, 0.625, 2.5, 3.75, 5.0, 6.25]
    coeffA = [[331.03480203434, 282.83330236082, 103.2218734542, 20.8591591703, 2.52073411727, 0.18216398527, 0.0072892399, 0.00012459125], [1016735.8092646737, 1204986.081093367, 612714.0125857604, 173254.4375527027, 29419.43789307512, 2999.58210646753, 170.0185946801, 4.13235111648], [8359191.832661943, 11700770.825925717, 7062739.246839453, 2382021.957825643, 484577.8140615008, 59434.9181490288, 4067.99311153252, 119.81407808661], [477938.4745855105, -4071940.9306818643, -6490229.555362781, -4099689.298635237, -1378739.5931772164, -262526.5588669827, -26890.80291443462, -1158.03871038332], [1694030.4030138745, 142001.35798397186, -426512.01412515657, 650964.4214264076, 824619.0954110107, 345009.8026994192, 65574.34709759937, 4845.02930330942], [1673275.2445434276, -7935.21093366442, -918882.8872440088, -233892.0379649443, 0.0, 0.0, 0.0, 0.0], [1673275.2445434276, 7935.21093366557, -918882.887244016, 233892.0379649529, 0.0, 0.0, 0.0, 0.0], [1694030.40301464, -142001.3579884378, -426512.01411454537, -650964.4214397267, 824619.0954205763, -345009.8027033676, 65574.34709847107, -4845.0293033892], [477938.48932427465, 4071940.896813153, -6490229.522138587, 4099689.2806017506, -1378739.5873286966, 262526.5577337911, -26890.80279298889, 1158.03870483019], [8359192.127046376, -11700771.290690018, 7062739.560403999, -2382022.0750103216, 484577.84025870153, -59434.92165205342, 4067.99337093439, -119.81408629198], [1016735.793157187, -1204986.0678020075, 612714.0091746122, -173254.43765093136, 29419.43811053068, -2999.58215123504, 170.01859862164, -4.13235124947], [331.0348019478, -282.83330229324, 103.22187343228, -20.85915916653, 2.5207341169, -0.18216398525, 0.0072892399, -0.00012459125]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def scauchy_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-40.0, -20.0, -10.0, -5.0, -2.5, -0.625, 0.0, 0.625, 2.5, 5.0, 10.0, 20.0]
    coeffA = [[47087.24820001562, 6602.27045747817, 429.8488024141, 15.76879292609, 0.33572272581, 0.00388415582, 1.893787e-05], [182880.02306384503, 50980.95462717808, 6612.24949033692, 483.78057892936, 20.55695168308, 0.47490896595, 0.00462515163], [651388.9336122529, 354348.98366236483, 90415.5832653723, 13075.82534559474, 1101.55405827101, 50.55403740379, 0.9794496985], [1685480.9196184708, 1637499.4456149838, 771276.0740588803, 210278.53160675365, 33869.53123854452, 3001.24116521325, 113.06891358955], [1392640.1341993425, 116611.26100953454, -1823458.4404914142, -1940448.1357428094, -921285.7592510745, -216436.1383900091, -20432.75872132789], [1335080.4949818475, -18857.02240296258, -1568520.2996864228, -925265.8876956676, 0.0, 0.0, 0.0], [1335080.4949818475, 18857.02240296309, -1568520.299686423, 925265.8876956665, 0.0, 0.0, 0.0], [1392640.1341998093, -116611.26101185373, -1823458.440486917, 1940448.1357384555, -921285.7592488426, 216436.1383894316, -20432.75872126864], [1685480.9196061292, -1637499.4455946453, 771276.0740450928, -210278.53160183047, 33869.53123756758, -3001.24116511108, 113.06891358515], [651388.933607513, -354348.9836584659, 90415.58326399243, -13075.8253453281, 1101.55405824182, -50.5540374021, 0.97944969846], [182880.02306657945, -50980.95462765019, 6612.24949035189, -483.78057892847, 20.55695168304, -0.47490896595, 0.00462515163], [47087.24820097536, -6602.27045758216, 429.8488024177, -15.76879292613, 0.33572272581, -0.00388415582, 1.893787e-05]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def gamma_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 1.7450580447912214e-06, 2.490116089582443e-06, 3.980232179164886e-06, 6.960464358329773e-06, 1.2920928716659545e-05, 2.484185743331909e-05, 4.868371486663818e-05, 9.636742973327637e-05, 0.00019173485946655274, 0.00038246971893310546, 0.0007639394378662109, 0.0030527577514648436, 0.012208031005859375, 0.048829124023437497, 0.19531349609374998, 0.781250984375, 1.56250096875, 3.1250009375, 4.6875009062499995, 6.250000875, 7.81250084375, 9.3750008125, 10.93750078125, 12.50000075, 14.062500718749998, 15.625000687499998]
    coeffA = [[1018.09213015625, 1536576226.6643891, -188366061843360.62, 2251799813685248.0, 0.0], [1280.28437994181, 1226796097.5668669, -96946937598522.47, 2251799813685248.0, 0.0], [1572.47838452603, 996836253.9848976, -51720800386984.26, 2251799813685248.0, 0.0], [2031.86401855856, 769945076.9148647, -23713795578333.02, 2251799813685248.0, 0.0], [2724.59912581678, 573457866.0168536, -9783267647694.781, 2251799813685248.0, 0.0], [3732.9461455438, 418774225.2159852, -3851510161609.4946, 2251799813685248.0, 0.0], [5118.91023882657, 307589428.98777443, -1621672382887.4348, 2251799813685248.0, 0.0], [6557.70935712717, 247093528.98349407, -986102814793.6405, 2251799813685248.0, 0.0], [8605.58390153626, 189426208.29068333, -452123700474.67224, 632107589048141.4, 0.0], [12146.5415122771, 134190909.33720367, -160790075329.25177, 112784093398543.7, 0.0], [17161.79008557367, 94963128.00450906, -57036402493.92954, 20034779723352.086, 0.0], [25135.05971478719, 65336366.7871133, -19767122574.687077, 4453706503244.261, -422995523529626.44], [50288.09531112882, 32611004.329444624, -2488129853.462147, 139846251058.90067, -3320042214535.9805], [100840.31616099816, 16172663.88419545, -318595463.7723025, 4435212929.162645, -26263440271.653297], [203922.423077235, 7813631.231947995, -43382961.60480171, 147580902.1215608, -216074814.85129198], [428693.14133342734, 3313164.925291549, -6739326.1916817995, 5993850.713961597, -2158916.5737013547], [842389.8643957814, 955788.7366587785, -1507126.2664406751, 694669.7206262839, -115133.79050361452], [1448509.9958317257, -579643.1381818211, -17645.18312313009, 39495.21398652404, -5099.38817966558], [1786429.234080426, -1084428.0002848343, 264611.88981233013, -30469.97836414127, 1383.79942420181], [1381878.8097941126, -743786.9142392672, 156527.42624464803, -15151.70973200181, 565.57883732142], [805781.646404276, -370332.41117463744, 65450.0813786443, -5248.76817780601, 160.56960968238], [390367.20542117365, -154457.7253706543, 23297.3065681282, -1583.42057311523, 40.82611459077], [166128.04294720644, -57412.12661776653, 7526.14145307331, -442.79132467528, 9.85101044306], [64270.57101136386, -19668.8151667197, 2276.30509821549, -117.93970892654, 2.30601190375], [23116.0738328986, -6339.68359826391, 656.21052864498, -30.35845872708, 0.52928997443], [7860.73742435953, -1951.10934543808, 182.51613770693, -7.62176695986, 0.11982299901], [23.62352923613, -2.88514489422, 0.12853298569, -0.00246995199, 1.728724e-05]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def chi_square(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [0.0, 0.46875, 7.5, 15.0, 22.5]
    coeffA = [[5e-11, 1092435.6671879266, -541075.2836601372, 116921.37732871455, 0.0, 0.0, 0.0, 0.0], [882.75045322758, 1088457.0609942072, -538493.0174608433, 129629.43979711286, -19365.47303773398, 1855.77753283177, -104.86567567158, 2.64465733991], [1345473.72086003, -116290.4608140664, -49962.93185098539, 12164.40072660188, -1215.59547105958, 64.98863443238, -1.83693804516, 0.02169857908], [2230745.1122474633, -640440.7281494313, 81017.43249851862, -5832.03130511724, 257.11510743947, -6.92087571078, 0.10503183961, -0.00069165115], [808662.5475423997, -188632.01753327265, 19072.55561510917, -1081.77934433188, 37.12066913967, -0.76969021217, 0.00892005961, -4.453329e-05]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def sexp_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [0.0, 0.625, 2.5, 5.0, 7.5]
    coeffA = [[4194279.0034393086, -4188015.40340937, 2032363.5441380604, -514562.51801293145, 0.0, 0.0], [4182306.912914592, -4134143.080131629, 1975884.1921842482, -571126.7171068311, 97638.46337939336, -7598.95601638222], [3553111.111434528, -2963087.389371894, 1070877.4344022807, -206355.54200917657, 20886.11601769146, -877.03326557364], [1787780.9462581328, -1121553.5036719583, 290483.1973959177, -38582.5170785156, 2614.32773463139, -71.99127440061], [584378.6269254918, -285232.8904193843, 56567.89195629852, -5682.35447476774, 288.46463423554, -5.90940365977]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def slog_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [0.0001, 0.0013207000732421874, 0.002541400146484375, 0.00498280029296875, 0.0098656005859375, 0.03916240234375, 0.31259921875, 2.50009375, 10.000075, 20.00005]
    coeffA = [[-0.02459122122, 320.74795375661, -807927.7641031268, 595709836.704581, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.07949862737, -362.70216737733, 1384734.6661831636, -1594840701.3165936, 716278442048.0255, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.82626269341, 564.446047639, 2589351.8772282084, -2847813799.364955, 1126358225030.726, -46500449444576.45, 0.0, 0.0, 0.0, 0.0], [-193.29772568628, 168808.56904080888, -57529942.69456613, 8110294911.208181, 104696253393.51854, -7457270990729.54, 0.0, 0.0, 0.0, 0.0], [-778.995058131, 529866.955288781, -141205630.7978427, 17571755491.763412, -430080334748.5429, 5082897827160.947, -25212739019871.258, 0.0, 0.0, 0.0], [96120.97760962803, -11970893.507686073, 575717093.3632159, -5988956275.859581, 36728909496.43703, -151286153071.0149, 423004589464.1389, -770880991661.8163, 825996645687.9789, -394590857755.1741], [-810955.3259980605, 28942527.970635004, -91170607.31223425, 151232318.67085254, -157621952.2016063, 107780039.90346774, -48240084.90354817, 13598457.717849469, -2188715.5936132395, 153264.66917469283], [4353045.370981124, -4370917.947825709, 2207201.765559526, -696654.4684186192, 146688.41738485076, -20967.11860368141, 2011.37472457862, -124.00809090148, 4.43991782819, -0.07015567521], [876981.884446715, -400441.0557616961, 86658.82522447527, -11397.0506272908, 989.93816622845, -58.37508951731, 2.32341661522, -0.05994921855, 0.00090735586, -6.12527e-06], [136159.6962724412, -33263.13866893174, 3767.63533343286, -255.91618738348, 11.38345437774, -0.34181457739, 0.00690040468, -9.005002e-05, 6.8789e-07, -2.34e-09]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def bs_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 0.11718849609375, 0.2343759921875, 0.468750984375, 1.8750009375, 3.750000875, 7.50000075, 11.250000625]
    coeffA = [[-3.76986e-06, 3.76997266924, -115.99778441945, 881.63385732906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2994.60119895981, -164754.78881507227, 3922810.0216139155, -52574764.94248238, 431149172.32796526, -2196233766.3286734, 6713723239.981669, -11203013349.996048, 8255395220.060384, -863896187.3526937], [5160.97548230179, 192285.62903706517, -7278577.777860985, 90245768.09216626, -578357295.7385416, 2128082682.3715403, -4617554221.884975, 5938952283.270541, -4234523757.383838, 1299416553.9404624], [-278172.0758180474, 4932077.215449626, -30833147.70952822, 90956835.87112312, -138698216.3526861, 125114457.23137271, -70423722.33443446, 24485390.920237456, -4834730.303042706, 415887.1130351295], [-4341325.134919816, 10704169.671737675, -6444998.521111922, -435100.5132866476, 2247468.947441889, -1222157.074710976, 343062.98809158825, -55829.97797459294, 5023.78448538989, -194.6719849227], [3959653.430258565, -1940997.801967708, -542053.1637640283, 714415.8892956282, -269229.60817138373, 55914.71926170459, -7118.29626300876, 556.23870259181, -24.63280170578, 0.47535621491], [2621367.5310228225, -2295327.3082079967, 898355.1092532218, -206085.63250605608, 30514.18082613832, -3022.10127913838, 200.08437245853, -8.53487872264, 0.2127505958, -0.00236029669], [740.32881007073, -339.24355697447, 68.28840170362, -7.92568369734, 0.58455172073, -0.02841681193, 0.00091074082, -1.856128e-05, 2.1835e-07, -1.13e-09]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
        
    cipher_index = Array(n, sfix)
    @for_range_opt(n-1)
    def _(i):
        cipher_index[i] = comp[i+regint(1)]
        cipher_index[i] = comp[i]*(comp[i] - cipher_index[i]) 

    return sfix.dot_product(cipher_index, poss_res)


